面向数据集的api 基础api 复合api
面向数据集： 元素组成 -----单元素， k，v元素-----------------》结构化，非结构化
sc.parallelize()
union合并，并集，两个数据集合并成一个大的数据集，他们合并之后的分区是两个数据集分区之和，不需要产生数据流动的，如果再这个合并之后的数据集中产生
计算或者转换的操作的时候就需要产生shuffle了，所以union操作是range依赖操作属于窄依赖，作用到一台物理机上的

cartesian 笛卡尔积 不会产生shuffle  数据传递有两种方式，1.shuffle 是需要分区，然后跟前分区拉取自己所需要的分区上的数据 2.i/o拉取，全量数据
不需要分区  也是一个窄依赖操作 如果数据不需要区分每一条记录归属于按个分区，也就是间接的这样的数据不需要partitiner分区器，也就不需要shuffle了
因为shuffle的语义就是洗牌----》面向没提他记录算出他的分区号
如果有些行为，不需要区分记录，这个之后就是只需要本地io拉取数据，那么这种直接io一定比先partitiner计算，shuffle落文件，最后在io拉取的速度快
spark很人性 面向数据集提供了不同的方法的封装且方法以及经过经验，尝试，推算出自己的实现方式
人不需要干预 （有一个算子需要自己设置是窄依赖还是宽依赖）
  
  Partitiner---------------------------shuffle·-------人的思维角度，你的数据加工逻辑是不是按照相同的key为一组进行操作的，也就是有没有需要
  partitiner分区这种事去算你是哪个组那个分区的
  
  intersection 交集  产生了shuffle拉取数据，为什么没有直接io全量数据然后再进行取交集呢，因为这个取交集肯定会有一个reducebykey的过程也就是区分
  相同的数据，也就是相同的key为一组额事情
  
  subtract 差集 只提供了一个方法：有方向的
    也是需要shuffle的过程
    
  关联集
      join内关联 也就是必须要都有的才会输出显示
          flatmapValues 面向的是只对键值对的数据的value进行操作，key保持原样不动
      leftouterjoin 左联
          使用了内关联逻辑，再补全了右边没有的逻辑
      rightouterjoin 右联
          使用了内关联逻辑，再补全了左边边没有的逻辑
      fulllouterjoin 全关联
  
  
  sparkContext 中setLogLeVel方法 可以设置日志打印界别
  
  cogroup
      产生shuffle，产生数据集，需要用key进行分组，  如果不走shuffle的话，用全量io拉取数据的话，就会出现有的分区上你全量移动的数据不会被使用
      浪费了io资源，而shuffle操作会降低我的io流，不会全量移动数据，周老师的话 当你知道规避io的时候那你就是一个高级程序员了
      
      面向数据集操作 1.单元素的 union cartesion 没有自己传入函数计算的
                    2.kv元素 cogroup很重要 join 没有自己传入函数计算的
                    3.排序  
                    4.聚合计算 reducebykey 面向一组  有函数  combinerbykey很重要
                    5.带函数的费聚合 map flatmap 面向每一条记录
                    
  排序
  
      
      PV（page view）即页面浏览量或点击量，是衡量一个网站或网页用户访问量。具体的说，
      PV值就是所有访问者在24小时（0点到24点）内看了某个网站多少个页面或某个网页多少次。
      PV是指页面刷新的次数，每一次页面刷新，就算做一次PV流量。
      UV（unique visitor）即独立访客数，指访问某个站点或点击某个网页的不同IP地址的人数。
      在同一天内，UV只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。
      UV提供了一定时间内不同观众数量的统计指标，而没有反应出网站的全面活动。通过IP和cookie是判断UV值的两种方式：
      用Cookie分析UV值
      IP即独立IP数
      
      take的次数是有算法的，步距跳跃的到分区上进行拉取
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
