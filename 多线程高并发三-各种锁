syn--atomic--longAder  syn是加锁有可能去操作系统获取重量级锁--------atomic是CAS 比较并设置compareandset state  head/tail 无锁状态 ----  longAder
是一个分段锁的机制
syn的效率未必比atomic，longAder这些CAS的效率低
AQS--同步器
抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它
     如常用的ReentrantLock/Semaphore/CountDownLatch...。
最近CAS锁 
同一线程中syn的“同一把锁”不同的方法是可重入的 
ReentrantLcok 也是CAS实现
    lock 加锁 unlock 解锁 两个方法必须同时存在，需要手动解锁，syn是自动解锁的
    trylock 可以尝试锁定，可知道时间内得到锁，如果再指定时间内得不到就会返回false，程序并继续向下执行
    lockInterruptibly 可以被打断的加锁，也就是在等待的过程中，调用了线程的interrupt方法 这个时候等待的锁会唤醒并继续往下执行
    可以在构造方法上指定false和true，非公平锁和公平锁， 意思就是等待队列中如果有数据，公平锁是当新线程进来的时候回去先判断等待队列中有没有
    等待的线程，如果有就会进入等待队列中，非公平锁的话是不会进行判断等待队列中的情况，新线程进来的时候直接就去抢锁，抢不到再进入等待队列
    需要注意的是公平锁并非绝对公平的
    syn只有不公平锁，也是抢到锁的必须执行完才会释放
    里面还有condition的用法

CountDownLatch 门栓 门闩
    await 等待
    countDown 减一，当指定的值减到0的时候门闩打开，程序继续往前走
    
CyclicBarrier 栅栏 循环栅栏 
    构造方法中传入 一个指定值就是栅栏等待值，第二个参数是runnanble，到达等待值之后执行什么操作
                   如果参数为一个指定值的时候，那就是指等待到达指定值之后，程序继续往下执行
                  用法： 线程中调用await方法等待 到达指定的等待值之后，程序继续执行，然后循环回来栅栏继续等待下一次满足等待值
Phaser 阶段
                  
                  
