redis的顺序行
1.每个链接内的命令是顺序到达顺序处理的
2.高多发，多线程对redis进行操作的时候，顺序性就无法保证了
3。数据一致性是最头疼的，在负载，网关路由的时候最好把相同的东西打到一个节点去，就跟kafka一样，为了保证资源的顺序，虽然顺序可能时间差很久
，但是尽量把放对于一个key的操作在一个分区一个token里面去，但他们到达的相互顺序是可以保证的
 数据库，表很大的时候，性能下降？
 1.如果表有索引，增删改会变慢 因为要维护索引 查询速度 1.一个或者少量查询依然很快 2.并发大的时候会受硬盘的带宽影响速度
假设有10000个查询，每个查询查询一个4k大小的数据，也就是说每个查询不一样，刚好又分别散列在不同的4k大小的磁盘数据块上面，查询进入的这个10000个
查询的4k是流着，挨个儿向内存走的，查一个走一个，这个时候就有一部分会等待前面的4k数据查询执行，等待他们完成之后自己才执行  这个时候就是磁盘带宽
的影响

数据在磁盘和内存的体积不一样

redis 两个基础设施
1.冯诺依曼体系的硬件
2.以太网，tcp/ip的网络
memerycached   key value  value没有类型的概念
json 表示很复杂的数据结构  世界上有三种数据表示
k=a k=1
k={1,2,3} k={a,x,f}
k={x=y} k=[{},{}]

client---------------------缓存 k，v 取回v中的某一个元素---------------memcached返回value所有的数据到client（server 网卡io）  client要有你实现
的代码去解码
                                                                   ---redis  类型其实不是很重要的 redis的server中对每种类型都有自己的方法
                                                                   index  lpop
                                                                   
                                   这就是redis和memcached的区别，用一句话概括就是计算向数据移动的，不需要返回所有数据在client端再进行计算而是
                                   在redis的server端根据你key找到value然后在server端进行计算，最后返回少量的数据给你
       磁盘固定4k大小吗，不一定，硬盘上面有个缓冲区，磁盘可以格式化为4k，也可以格式化为更大的，这个取决于你上层调用数据的io量，一般4k大小合适不怎么
       浪费，但是你如果是视频录像这个时候对磁盘的访问就不是很小的量，这个时候磁盘寻址带来的时间和碎片化太大，磁头来回飘动太大，还是直接飘到一个地方
       直接读取更多的数据，这个是取决于你的这个访问io量的大小，你是访问量大还是就是小文件来定的
